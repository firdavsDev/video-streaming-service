version: '3.8'

services:
  app:
    build: .
    container_name: video_streaming_app
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./.env:/app/.env          # .env faylini mount qilish
      - ./uploads:/app/uploads
      - ./videos:/app/videos
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    env_file:
      - .env

  # celery:
  #   build: .
  #   container_name: video_streaming_celery
  #   volumes:
  #     - ./app:/app/app
  #     - ./.env:/app/.env        # Celery uchun ham
  #     - ./uploads:/app/uploads
  #     - ./videos:/app/videos
  #     - ./logs:/app/logs
  #   depends_on:
  #     - db
  #     - redis
  #   restart: unless-stopped
  #   command: celery -A celery_app worker --loglevel=info
  #   env_file:
  #     - .env

  db:
    image: postgres:15
    container_name: video_streaming_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    env_file:
      - .env
    
  redis:
    image: redis:7-alpine
    container_name: video_streaming_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # nginx:
  #   image: nginx:alpine
  #   container_name: video_streaming_nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./videos:/var/www/videos
  #   depends_on:
  #     - app
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data: